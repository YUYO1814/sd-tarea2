// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: reservas.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReservasService_EnviarLote_FullMethodName = "/sd.ReservasService/EnviarLote"
)

// ReservasServiceClient is the client API for ReservasService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReservasServiceClient interface {
	EnviarLote(ctx context.Context, in *LoteReservas, opts ...grpc.CallOption) (*Ack, error)
}

type reservasServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReservasServiceClient(cc grpc.ClientConnInterface) ReservasServiceClient {
	return &reservasServiceClient{cc}
}

func (c *reservasServiceClient) EnviarLote(ctx context.Context, in *LoteReservas, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, ReservasService_EnviarLote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReservasServiceServer is the server API for ReservasService service.
// All implementations must embed UnimplementedReservasServiceServer
// for forward compatibility.
type ReservasServiceServer interface {
	EnviarLote(context.Context, *LoteReservas) (*Ack, error)
	mustEmbedUnimplementedReservasServiceServer()
}

// UnimplementedReservasServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReservasServiceServer struct{}

func (UnimplementedReservasServiceServer) EnviarLote(context.Context, *LoteReservas) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarLote not implemented")
}
func (UnimplementedReservasServiceServer) mustEmbedUnimplementedReservasServiceServer() {}
func (UnimplementedReservasServiceServer) testEmbeddedByValue()                         {}

// UnsafeReservasServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReservasServiceServer will
// result in compilation errors.
type UnsafeReservasServiceServer interface {
	mustEmbedUnimplementedReservasServiceServer()
}

func RegisterReservasServiceServer(s grpc.ServiceRegistrar, srv ReservasServiceServer) {
	// If the following call pancis, it indicates UnimplementedReservasServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReservasService_ServiceDesc, srv)
}

func _ReservasService_EnviarLote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoteReservas)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservasServiceServer).EnviarLote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservasService_EnviarLote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservasServiceServer).EnviarLote(ctx, req.(*LoteReservas))
	}
	return interceptor(ctx, in, info, handler)
}

// ReservasService_ServiceDesc is the grpc.ServiceDesc for ReservasService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReservasService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sd.ReservasService",
	HandlerType: (*ReservasServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnviarLote",
			Handler:    _ReservasService_EnviarLote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reservas.proto",
}

const (
	RegistroService_Persistir_FullMethodName = "/sd.RegistroService/Persistir"
)

// RegistroServiceClient is the client API for RegistroService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistroServiceClient interface {
	Persistir(ctx context.Context, in *ResultadoReserva, opts ...grpc.CallOption) (*Ack, error)
}

type registroServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistroServiceClient(cc grpc.ClientConnInterface) RegistroServiceClient {
	return &registroServiceClient{cc}
}

func (c *registroServiceClient) Persistir(ctx context.Context, in *ResultadoReserva, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, RegistroService_Persistir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistroServiceServer is the server API for RegistroService service.
// All implementations must embed UnimplementedRegistroServiceServer
// for forward compatibility.
type RegistroServiceServer interface {
	Persistir(context.Context, *ResultadoReserva) (*Ack, error)
	mustEmbedUnimplementedRegistroServiceServer()
}

// UnimplementedRegistroServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRegistroServiceServer struct{}

func (UnimplementedRegistroServiceServer) Persistir(context.Context, *ResultadoReserva) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Persistir not implemented")
}
func (UnimplementedRegistroServiceServer) mustEmbedUnimplementedRegistroServiceServer() {}
func (UnimplementedRegistroServiceServer) testEmbeddedByValue()                         {}

// UnsafeRegistroServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistroServiceServer will
// result in compilation errors.
type UnsafeRegistroServiceServer interface {
	mustEmbedUnimplementedRegistroServiceServer()
}

func RegisterRegistroServiceServer(s grpc.ServiceRegistrar, srv RegistroServiceServer) {
	// If the following call pancis, it indicates UnimplementedRegistroServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RegistroService_ServiceDesc, srv)
}

func _RegistroService_Persistir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultadoReserva)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistroServiceServer).Persistir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistroService_Persistir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistroServiceServer).Persistir(ctx, req.(*ResultadoReserva))
	}
	return interceptor(ctx, in, info, handler)
}

// RegistroService_ServiceDesc is the grpc.ServiceDesc for RegistroService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegistroService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sd.RegistroService",
	HandlerType: (*RegistroServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Persistir",
			Handler:    _RegistroService_Persistir_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reservas.proto",
}

const (
	MonitoreoService_Subscribe_FullMethodName = "/sd.MonitoreoService/Subscribe"
)

// MonitoreoServiceClient is the client API for MonitoreoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitoreoServiceClient interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ResultadoReserva], error)
}

type monitoreoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitoreoServiceClient(cc grpc.ClientConnInterface) MonitoreoServiceClient {
	return &monitoreoServiceClient{cc}
}

func (c *monitoreoServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ResultadoReserva], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MonitoreoService_ServiceDesc.Streams[0], MonitoreoService_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, ResultadoReserva]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MonitoreoService_SubscribeClient = grpc.ServerStreamingClient[ResultadoReserva]

// MonitoreoServiceServer is the server API for MonitoreoService service.
// All implementations must embed UnimplementedMonitoreoServiceServer
// for forward compatibility.
type MonitoreoServiceServer interface {
	Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[ResultadoReserva]) error
	mustEmbedUnimplementedMonitoreoServiceServer()
}

// UnimplementedMonitoreoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMonitoreoServiceServer struct{}

func (UnimplementedMonitoreoServiceServer) Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[ResultadoReserva]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedMonitoreoServiceServer) mustEmbedUnimplementedMonitoreoServiceServer() {}
func (UnimplementedMonitoreoServiceServer) testEmbeddedByValue()                          {}

// UnsafeMonitoreoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitoreoServiceServer will
// result in compilation errors.
type UnsafeMonitoreoServiceServer interface {
	mustEmbedUnimplementedMonitoreoServiceServer()
}

func RegisterMonitoreoServiceServer(s grpc.ServiceRegistrar, srv MonitoreoServiceServer) {
	// If the following call pancis, it indicates UnimplementedMonitoreoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MonitoreoService_ServiceDesc, srv)
}

func _MonitoreoService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoreoServiceServer).Subscribe(m, &grpc.GenericServerStream[SubscribeRequest, ResultadoReserva]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MonitoreoService_SubscribeServer = grpc.ServerStreamingServer[ResultadoReserva]

// MonitoreoService_ServiceDesc is the grpc.ServiceDesc for MonitoreoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonitoreoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sd.MonitoreoService",
	HandlerType: (*MonitoreoServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _MonitoreoService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "reservas.proto",
}
